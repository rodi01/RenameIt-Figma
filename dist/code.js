!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=88)}({1:function(e,t,n){"use strict";n.r(t),n.d(t,"html",(function(){return a})),n.d(t,"script",(function(){return s}));var r=n(7);function i(e){const t=new r.EventEmitter,n=e=>{e&&e.event&&t.emit(e.event,e.data)};return e?window.onmessage=e=>n(e.data.pluginMessage):figma.ui.onmessage=e=>n(e),t.send=function(t,n){if("string"!=typeof t)throw new Error("Expected first argument to be an event name string");const r={event:t,data:n};e?window.parent.postMessage({pluginMessage:r},"*"):figma.ui.postMessage(r)},t.async=function(e){return new Promise(t=>{this.once(e,t)})},t}const o="undefined"==typeof figma,a=o?i(!0):void 0,s=o?void 0:i()},11:function(e,t,n){"use strict";t.__esModule=!0,t.findReplaceData=t.renameData=void 0,t.renameData=function(e,t,n,r,i){return{layerName:e.layerName,currIdx:e.idx,width:e.width,height:e.height,selectionCount:t,inputName:n,startsFrom:Number(r),pageName:i,parentName:e.parentName,symbolName:e.symbolName,layerStyle:e.layerStyle,childLayer:e.childLayer}},t.findReplaceData=function(e,t,n,r){return{layerName:e.layerName,currIdx:e.idx,findText:t,replaceWith:n,caseSensitive:r}}},12:function(e,t,n){"use strict";t.__esModule=!0,t.parseData=t.reorderSelection=t.hasSelection=t.WhereTo=void 0;var r=n(13);function i(e){return e.selection.length>0}function o(e){if(!i(e))return e.selection;var t=e.selection[0].parent;if(e.selection.every((function(e){return e.parent.id===t.id}))){var n=[];return t.children.forEach((function(t){e.selection.includes(t)&&n.push(t)})),n}return e.selection}!function(e){e.RenameLayers="renameLayers",e.FindReplace="findReplace",e.Settings="settings",e.NoSelection="noSelection",e.Donate="donate"}(t.WhereTo||(t.WhereTo={})),t.hasSelection=i,t.reorderSelection=o,t.parseData=function(e){var t={pageName:e.name,selectionCount:e.selection.length,selection:[],hasLayerStyle:!1,hasSymbol:!1,hasChildLayer:!1};return o(e).forEach((function(e,n){t.hasLayerStyle||(t.hasLayerStyle=r.hasStyles(e)),t.hasSymbol||(t.hasSymbol=r.hasSymbols(e)),t.hasChildLayer||(t.hasChildLayer=r.hasChildLayer(e)),t.selection[n]=function(e,t){return{layerName:e.name,idx:t,width:e.width,height:e.height,parentName:e.parent.name,layerStyle:r.getStyle(e),symbolName:r.getSymbolName(e),childLayer:r.getChildLayer(e)}}(e,n)})),t}},13:function(e,t,n){"use strict";function r(e){return void 0!==e.textStyleId?""!==e.textStyleId:void 0!==e.fillStyleId&&""!==e.fillStyleId}function i(e){return"InstanceNode"===e.constructor.name}function o(e){try{return void 0!==e.children&&e.children.length>0}catch(e){return!1}}t.__esModule=!0,t.getChildLayer=t.hasChildLayer=t.getSymbolName=t.hasSymbols=t.getStyle=t.hasStyles=void 0,t.hasStyles=r,t.getStyle=function(e){var t="";if(r(e)){var n=figma.getStyleById(function(e){return"TextNode"===e.constructor.name?e.textStyleId:e.fillStyleId}(e));t=null!==n?n.name:""}return t},t.hasSymbols=i,t.getSymbolName=function(e){var t="";return i(e)&&(t=e.masterComponent.name),t},t.hasChildLayer=o,t.getChildLayer=function(e){var t="";if(o(e)){var n=e.children.length-1;t=String(e.children[n].name)}return t}},14:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"escapeRegExp",value:function(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}},{key:"layer",value:function(e){var t=e.caseSensitive?new RegExp(this.escapeRegExp(e.findText),"g"):new RegExp(this.escapeRegExp(e.findText),"gi");return e.layerName.replace(t,e.replaceWith)}},{key:"match",value:function(e){if(e.findText.length<=0)return!1;var t=String(e.findText),n=e.layerName;return e.caseSensitive||(t=t.toLowerCase(),n=n.toLowerCase()),n.includes(t)}}]),e}();t.default=i},15:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(26)),a=n(16),s=(r=a)&&r.__esModule?r:{default:r},u=n(4),c=n(3),l=n(5);function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var p=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.allowTextCases,r=void 0===n||n,i=t.allowPageName,o=void 0===i||i,a=t.allowParent,s=void 0===a||a,u=t.allowSymbol,c=void 0===u||u,l=t.allowLayerStyle,p=void 0===l||l,d=t.allowChildLayer,h=void 0!==d&&d;f(this,e),this.allowTextCases=r,this.allowPageName=o,this.allowParent=s,this.allowSymbol=c,this.allowLayerStyle=p,this.allowChildLayer=h}return i(e,[{key:"shortcut",value:function(e){return new RegExp(e,"gi")}},{key:"paddy",value:function(e,t,n){var r=void 0!==n?n:"0",i=new Array(1+t).join(r);return(i+e).slice(-i.length)}},{key:"convertTitleCase",value:function(e){var t=(0,c.lowerCase)(e);return(0,s.default)(t)}},{key:"currentLayer",value:function(e,t){var n=e;return this.allowTextCases&&(n=(n=(n=(n=(n=(n=n.replace(this.shortcut("%\\*u%"),(0,u.upperCase)(t))).replace(this.shortcut("%\\*l%"),(0,c.lowerCase)(t))).replace(this.shortcut("%\\*t%"),this.convertTitleCase(t))).replace(this.shortcut("%\\*uf%"),(0,l.upperCaseFirst)(t))).replace(this.shortcut("%\\*c%"),o.camelCase(t))).replace(this.shortcut("%\\*pc%"),o.paramCase(t))),n=n.replace(/%\*/g,t),String(n)}},{key:"layer",value:function(e){var t=e.inputName,n=t.match(this.shortcut("%N")),r=t.match(/(?!%ar%)%A/gi),i=t.match(this.shortcut("%ar%")),o=this;if(null!=n){t=t.replace(/%n+/gi,(function(t){var n=t.length-1,r="N"==t.charAt(1)?e.currIdx:e.selectionCount-e.currIdx-1;return(r+=e.startsFrom)>999&&(1===n||2===n||3===n)?n=4:r>99&&(1===n||2===n)?n=3:r>9&&1==n&&(n=2),o.paddy(r,n)}))}var a="abcdefghijklmnopqrstuvwxyz".split(""),s=a.length;function u(t){var n=t.charAt(1),r="%ar%"===t?e.selectionCount-e.currIdx-1:e.currIdx,i=a[r%s];if(r>=s){var o=Math.floor(r/s);i=""+a[o-1]+i}return"A"===n?i.toUpperCase():i}return null!=i&&(t=t.replace(this.shortcut("%ar%"),u)),null!=r&&(t=t.replace(this.shortcut("%a"),u)),t=(t=(t=o.currentLayer(t,e.layerName)).replace(this.shortcut("%w"),e.width)).replace(this.shortcut("%h"),e.height),this.allowPageName&&(t=t.replace(this.shortcut("%p"),e.pageName)),this.allowParent&&(t=t.replace(this.shortcut("%o"),e.parentName)),this.allowSymbol&&(t=t.replace(this.shortcut("%s"),e.symbolName)),this.allowLayerStyle&&(t=t.replace(this.shortcut("%ls%"),e.layerStyle)),this.allowChildLayer&&(t=t.replace(this.shortcut("%ch%"),e.childLayer)),t}}]),e}();t.default=p},16:function(e,t,n){var r=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;e.exports=function(e){return a(e,r)},e.exports.toTitleCase=e.exports;var i=n(17).concat(n(18)).concat(n(19)).concat(r.source.replace(/(^\^\(|\)\$$)/g,"").split("|")).concat(["is"]),o=new RegExp("^("+i.join("|")+")$","i");function a(e,t){return e?e.replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,(function(e,n,r){return n>0&&n+e.length!==r.length&&e.search(t)>-1&&":"!==r.charAt(n-2)&&("-"!==r.charAt(n+e.length)||"-"===r.charAt(n-1))&&r.charAt(n-1).search(/[^\s-]/)<0?e.toLowerCase():e.substr(1).search(/[A-Z]|\../)>-1?e:e.charAt(0).toUpperCase()+e.substr(1)})):e}e.exports.toLaxTitleCase=function(e){return a(e,o)}},17:function(e,t){e.exports=["the","a","an","some"]},18:function(e,t){e.exports=["a","abaft","aboard","about","above","absent","across","afore","after","against","along","alongside","amid","amidst","among","amongst","an","apropos","apud","around","as","aside","astride","at","athwart","atop","barring","before","behind","below","beneath","beside","besides","between","beyond","but","by","circa","concerning","despite","down","during","except","excluding","failing","following","for","forenenst","from","given","in","including","inside","into","like","mid","midst","minus","modulo","near","next","notwithstanding","o'","of","off","on","onto","opposite","out","outside","over","pace","past","per","plus","pro","qua","regarding","round","sans","save","since","than","through","throughout","thru","thruout","till","times","to","toward","towards","under","underneath","unlike","until","unto","up","upon","versus","via","vice","vis-Ã -vis","with","within","without","worth"]},19:function(e,t){e.exports=["as","because","for","and","nor","but","or","yet","so"]},20:function(e,t){var n=Object.prototype.hasOwnProperty,r=Object.prototype.toString;e.exports=function(e){if(null==e)return!0;if("boolean"==typeof e)return!1;if("number"==typeof e)return 0===e;if("string"==typeof e)return 0===e.length;if("function"==typeof e)return 0===e.length;if(Array.isArray(e))return 0===e.length;if(e instanceof Error)return""===e.message;if(e.toString==r)switch(e.toString()){case"[object File]":case"[object Map]":case"[object Set]":return 0===e.size;case"[object Object]":for(var t in e)if(n.call(e,t))return!1;return!0}return!1}},21:function(e,t,n){"use strict";
/*!
 * is-whitespace <https://github.com/jonschlinkert/is-whitespace>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */var r;e.exports=function(e){return"string"==typeof e&&(r||(r=new RegExp('^[\\s\t\n\v\f\r Â áá ââââââââââââ¯âã\u2028\u2029\ufeff"]+$'))).test(e)}},24:function(e){e.exports=JSON.parse('{"name":"Rename It","id":"731271836271143349","api":"1.0.0","ui":"dist/ui.html","main":"dist/code.js","menu":[{"name":"1. Rename Selected Layers","command":"renameLayers"},{"name":"2. Find & Replace Selected Layers","command":"findReplace"},{"separator":true},{"name":"3. Settings","command":"settings"},{"name":"4. Donate","command":"donate"}]}')},25:function(e){e.exports=JSON.parse('{"name":"rename-it-figma","version":"1.1.0","description":"\\"Keep your Figma files organized, batch rename layers and frames.\\"","main":"code.js","scripts":{"dev":"webpack --watch --mode development --devtool inline-source-map --config webpack.config.js","prod":"webpack --mode production --devtool inline-source-map --config webpack.config.js","test":"echo \\"Error: no test specified\\" && exit 1"},"author":"Rodrigo Soares","license":"ISC","dependencies":{"@figma/plugin-typings":"^1.15.0","@rodi01/renameitlib":"^1.2.3","@types/react":"^16.9.35","@types/react-dom":"^16.9.8","css-loader":"^3.5.3","html-webpack-inline-source-plugin":"0.0.10","html-webpack-plugin":"^3.2.0","node-sass":"^4.14.1","react":"^16.13.1","react-dom":"^16.13.1","react-figma-plugin-ds":"^1.0.3","sass-loader":"^8.0.2","style-loader":"^1.2.1","ts-loader":"^7.0.4","typescript":"^3.9.2","url-loader":"^4.1.0","uuid":"^8.0.0","webpack":"^4.43.0","webpack-cli":"^3.3.11"},"devDependencies":{"@typescript-eslint/eslint-plugin":"^2.33.0","@typescript-eslint/parser":"^2.33.0","eslint":"^7.0.0","eslint-config-airbnb":"^18.1.0","eslint-config-prettier":"^6.11.0","eslint-plugin-prettier":"^3.1.3","eslint-plugin-react":"^7.20.0","is-blank":"^2.1.0","is-number":"^7.0.0","prettier":"^2.0.5"}}')},26:function(e,t,n){"use strict";n.r(t),n.d(t,"camelCaseTransform",(function(){return p})),n.d(t,"camelCaseTransformMerge",(function(){return d})),n.d(t,"camelCase",(function(){return h})),n.d(t,"capitalCaseTransform",(function(){return b})),n.d(t,"capitalCase",(function(){return w})),n.d(t,"constantCase",(function(){return x})),n.d(t,"dotCase",(function(){return S})),n.d(t,"headerCase",(function(){return L})),n.d(t,"noCase",(function(){return s})),n.d(t,"paramCase",(function(){return _})),n.d(t,"pascalCaseTransform",(function(){return c})),n.d(t,"pascalCaseTransformMerge",(function(){return l})),n.d(t,"pascalCase",(function(){return f})),n.d(t,"pathCase",(function(){return A})),n.d(t,"sentenceCaseTransform",(function(){return R})),n.d(t,"sentenceCase",(function(){return E})),n.d(t,"snakeCase",(function(){return O}));var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};var i=n(3),o=[/([a-z0-9])([A-Z])/g,/([A-Z])([A-Z][a-z])/g],a=/[^A-Z0-9]+/gi;function s(e,t){void 0===t&&(t={});for(var n=t.splitRegexp,r=void 0===n?o:n,s=t.stripRegexp,c=void 0===s?a:s,l=t.transform,f=void 0===l?i.lowerCase:l,p=t.delimiter,d=void 0===p?" ":p,h=u(u(e,r,"$1\0$2"),c,"\0"),v=0,y=h.length;"\0"===h.charAt(v);)v++;for(;"\0"===h.charAt(y-1);)y--;return h.slice(v,y).split("\0").map(f).join(d)}function u(e,t,n){return t instanceof RegExp?e.replace(t,n):t.reduce((function(e,t){return e.replace(t,n)}),e)}function c(e,t){var n=e.charAt(0),r=e.substr(1).toLowerCase();return t>0&&n>="0"&&n<="9"?"_"+n+r:""+n.toUpperCase()+r}function l(e){return e.charAt(0).toUpperCase()+e.slice(1).toLowerCase()}function f(e,t){return void 0===t&&(t={}),s(e,r({delimiter:"",transform:c},t))}function p(e,t){return 0===t?e.toLowerCase():c(e,t)}function d(e,t){return 0===t?e.toLowerCase():l(e)}function h(e,t){return void 0===t&&(t={}),f(e,r({transform:p},t))}function v(e){return e.toLowerCase()}var y=[/([a-z0-9])([A-Z])/g,/([A-Z])([A-Z][a-z])/g],g=/[^A-Z0-9]+/gi;function m(e,t,n){return t instanceof RegExp?e.replace(t,n):t.reduce((function(e,t){return e.replace(t,n)}),e)}function b(e){return function(e){return e.charAt(0).toUpperCase()+e.substr(1)}(e.toLowerCase())}function w(e,t){return void 0===t&&(t={}),function(e,t){void 0===t&&(t={});for(var n=t.splitRegexp,r=void 0===n?y:n,i=t.stripRegexp,o=void 0===i?g:i,a=t.transform,s=void 0===a?v:a,u=t.delimiter,c=void 0===u?" ":u,l=m(m(e,r,"$1\0$2"),o,"\0"),f=0,p=l.length;"\0"===l.charAt(f);)f++;for(;"\0"===l.charAt(p-1);)p--;return l.slice(f,p).split("\0").map(s).join(c)}(e,r({delimiter:" ",transform:b},t))}var C=n(4);function x(e,t){return void 0===t&&(t={}),s(e,r({delimiter:"_",transform:C.upperCase},t))}function S(e,t){return void 0===t&&(t={}),s(e,r({delimiter:"."},t))}function L(e,t){return void 0===t&&(t={}),w(e,r({delimiter:"-"},t))}function _(e,t){return void 0===t&&(t={}),S(e,r({delimiter:"-"},t))}function A(e,t){return void 0===t&&(t={}),S(e,r({delimiter:"/"},t))}var j=n(5);function R(e,t){var n=e.toLowerCase();return 0===t?Object(j.upperCaseFirst)(n):n}function E(e,t){return void 0===t&&(t={}),s(e,r({delimiter:" ",transform:R},t))}function O(e,t){return void 0===t&&(t={}),S(e,r({delimiter:"_"},t))}},27:function(e,t,n){"use strict";n.r(t),n.d(t,"v1",(function(){return d})),n.d(t,"v3",(function(){return C})),n.d(t,"v4",(function(){return x})),n.d(t,"v5",(function(){return _}));var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),i=new Uint8Array(16);function o(){if(!r)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}for(var a=[],s=0;s<256;++s)a[s]=(s+256).toString(16).substr(1);var u,c,l=function(e,t){var n=t||0,r=a;return[r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]]].join("")},f=0,p=0;var d=function(e,t,n){var r=t&&n||0,i=t||[],a=(e=e||{}).node||u,s=void 0!==e.clockseq?e.clockseq:c;if(null==a||null==s){var d=e.random||(e.rng||o)();null==a&&(a=u=[1|d[0],d[1],d[2],d[3],d[4],d[5]]),null==s&&(s=c=16383&(d[6]<<8|d[7]))}var h=void 0!==e.msecs?e.msecs:(new Date).getTime(),v=void 0!==e.nsecs?e.nsecs:p+1,y=h-f+(v-p)/1e4;if(y<0&&void 0===e.clockseq&&(s=s+1&16383),(y<0||h>f)&&void 0===e.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=h,p=v,c=s;var g=(1e4*(268435455&(h+=122192928e5))+v)%4294967296;i[r++]=g>>>24&255,i[r++]=g>>>16&255,i[r++]=g>>>8&255,i[r++]=255&g;var m=h/4294967296*1e4&268435455;i[r++]=m>>>8&255,i[r++]=255&m,i[r++]=m>>>24&15|16,i[r++]=m>>>16&255,i[r++]=s>>>8|128,i[r++]=255&s;for(var b=0;b<6;++b)i[r+b]=a[b];return t||l(i)};var h=function(e,t,n){var r=function(e,r,i,o){var a=i&&o||0;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(e)),"string"==typeof r&&(r=function(e){var t=[];return e.replace(/[a-fA-F0-9]{2}/g,(function(e){t.push(parseInt(e,16))})),t}(r)),!Array.isArray(e))throw TypeError("value must be an array of bytes");if(!Array.isArray(r)||16!==r.length)throw TypeError("namespace must be uuid string or an Array of 16 byte values");var s=n(r.concat(e));if(s[6]=15&s[6]|t,s[8]=63&s[8]|128,i)for(var u=0;u<16;++u)i[a+u]=s[u];return i||l(s)};try{r.name=e}catch(e){}return r.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",r.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",r};function v(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function y(e,t,n,r,i,o){return v((a=v(v(t,e),v(r,o)))<<(s=i)|a>>>32-s,n);var a,s}function g(e,t,n,r,i,o,a){return y(t&n|~t&r,e,t,i,o,a)}function m(e,t,n,r,i,o,a){return y(t&r|n&~r,e,t,i,o,a)}function b(e,t,n,r,i,o,a){return y(t^n^r,e,t,i,o,a)}function w(e,t,n,r,i,o,a){return y(n^(t|~r),e,t,i,o,a)}var C=h("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Array(t.length);for(var n=0;n<t.length;n++)e[n]=t.charCodeAt(n)}return function(e){var t,n,r,i=[],o=32*e.length;for(t=0;t<o;t+=8)n=e[t>>5]>>>t%32&255,r=parseInt("0123456789abcdef".charAt(n>>>4&15)+"0123456789abcdef".charAt(15&n),16),i.push(r);return i}(function(e,t){var n,r,i,o,a;e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var s=1732584193,u=-271733879,c=-1732584194,l=271733878;for(n=0;n<e.length;n+=16)r=s,i=u,o=c,a=l,s=g(s,u,c,l,e[n],7,-680876936),l=g(l,s,u,c,e[n+1],12,-389564586),c=g(c,l,s,u,e[n+2],17,606105819),u=g(u,c,l,s,e[n+3],22,-1044525330),s=g(s,u,c,l,e[n+4],7,-176418897),l=g(l,s,u,c,e[n+5],12,1200080426),c=g(c,l,s,u,e[n+6],17,-1473231341),u=g(u,c,l,s,e[n+7],22,-45705983),s=g(s,u,c,l,e[n+8],7,1770035416),l=g(l,s,u,c,e[n+9],12,-1958414417),c=g(c,l,s,u,e[n+10],17,-42063),u=g(u,c,l,s,e[n+11],22,-1990404162),s=g(s,u,c,l,e[n+12],7,1804603682),l=g(l,s,u,c,e[n+13],12,-40341101),c=g(c,l,s,u,e[n+14],17,-1502002290),u=g(u,c,l,s,e[n+15],22,1236535329),s=m(s,u,c,l,e[n+1],5,-165796510),l=m(l,s,u,c,e[n+6],9,-1069501632),c=m(c,l,s,u,e[n+11],14,643717713),u=m(u,c,l,s,e[n],20,-373897302),s=m(s,u,c,l,e[n+5],5,-701558691),l=m(l,s,u,c,e[n+10],9,38016083),c=m(c,l,s,u,e[n+15],14,-660478335),u=m(u,c,l,s,e[n+4],20,-405537848),s=m(s,u,c,l,e[n+9],5,568446438),l=m(l,s,u,c,e[n+14],9,-1019803690),c=m(c,l,s,u,e[n+3],14,-187363961),u=m(u,c,l,s,e[n+8],20,1163531501),s=m(s,u,c,l,e[n+13],5,-1444681467),l=m(l,s,u,c,e[n+2],9,-51403784),c=m(c,l,s,u,e[n+7],14,1735328473),u=m(u,c,l,s,e[n+12],20,-1926607734),s=b(s,u,c,l,e[n+5],4,-378558),l=b(l,s,u,c,e[n+8],11,-2022574463),c=b(c,l,s,u,e[n+11],16,1839030562),u=b(u,c,l,s,e[n+14],23,-35309556),s=b(s,u,c,l,e[n+1],4,-1530992060),l=b(l,s,u,c,e[n+4],11,1272893353),c=b(c,l,s,u,e[n+7],16,-155497632),u=b(u,c,l,s,e[n+10],23,-1094730640),s=b(s,u,c,l,e[n+13],4,681279174),l=b(l,s,u,c,e[n],11,-358537222),c=b(c,l,s,u,e[n+3],16,-722521979),u=b(u,c,l,s,e[n+6],23,76029189),s=b(s,u,c,l,e[n+9],4,-640364487),l=b(l,s,u,c,e[n+12],11,-421815835),c=b(c,l,s,u,e[n+15],16,530742520),u=b(u,c,l,s,e[n+2],23,-995338651),s=w(s,u,c,l,e[n],6,-198630844),l=w(l,s,u,c,e[n+7],10,1126891415),c=w(c,l,s,u,e[n+14],15,-1416354905),u=w(u,c,l,s,e[n+5],21,-57434055),s=w(s,u,c,l,e[n+12],6,1700485571),l=w(l,s,u,c,e[n+3],10,-1894986606),c=w(c,l,s,u,e[n+10],15,-1051523),u=w(u,c,l,s,e[n+1],21,-2054922799),s=w(s,u,c,l,e[n+8],6,1873313359),l=w(l,s,u,c,e[n+15],10,-30611744),c=w(c,l,s,u,e[n+6],15,-1560198380),u=w(u,c,l,s,e[n+13],21,1309151649),s=w(s,u,c,l,e[n+4],6,-145523070),l=w(l,s,u,c,e[n+11],10,-1120210379),c=w(c,l,s,u,e[n+2],15,718787259),u=w(u,c,l,s,e[n+9],21,-343485551),s=v(s,r),u=v(u,i),c=v(c,o),l=v(l,a);return[s,u,c,l]}(function(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;var r=8*e.length;for(t=0;t<r;t+=8)n[t>>5]|=(255&e[t/8])<<t%32;return n}(e),8*e.length))}));var x=function(e,t,n){var r=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var i=(e=e||{}).random||(e.rng||o)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t)for(var a=0;a<16;++a)t[r+a]=i[a];return t||l(i)};function S(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:return t^n^r;case 2:return t&n^t&r^n&r;case 3:return t^n^r}}function L(e,t){return e<<t|e>>>32-t}var _=h("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var r=unescape(encodeURIComponent(e));e=new Array(r.length);for(var i=0;i<r.length;i++)e[i]=r.charCodeAt(i)}e.push(128);var o=e.length/4+2,a=Math.ceil(o/16),s=new Array(a);for(i=0;i<a;i++){s[i]=new Array(16);for(var u=0;u<16;u++)s[i][u]=e[64*i+4*u]<<24|e[64*i+4*u+1]<<16|e[64*i+4*u+2]<<8|e[64*i+4*u+3]}for(s[a-1][14]=8*(e.length-1)/Math.pow(2,32),s[a-1][14]=Math.floor(s[a-1][14]),s[a-1][15]=8*(e.length-1)&4294967295,i=0;i<a;i++){for(var c=new Array(80),l=0;l<16;l++)c[l]=s[i][l];for(l=16;l<80;l++)c[l]=L(c[l-3]^c[l-8]^c[l-14]^c[l-16],1);var f=n[0],p=n[1],d=n[2],h=n[3],v=n[4];for(l=0;l<80;l++){var y=Math.floor(l/20),g=L(f,5)+S(y,p,d,h)+v+t[y]+c[l]>>>0;v=h,h=d,d=L(p,30)>>>0,p=f,f=g}n[0]=n[0]+f>>>0,n[1]=n[1]+p>>>0,n[2]=n[2]+d>>>0,n[3]=n[3]+h>>>0,n[4]=n[4]+v>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]}))},3:function(e,t,n){"use strict";n.r(t),n.d(t,"localeLowerCase",(function(){return i})),n.d(t,"lowerCase",(function(){return o}));var r={tr:{regexp:/\u0130|\u0049|\u0049\u0307/g,map:{"Ä°":"i",I:"Ä±","IÌ":"i"}},az:{regexp:/\u0130/g,map:{"Ä°":"i",I:"Ä±","IÌ":"i"}},lt:{regexp:/\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,map:{I:"iÌ",J:"jÌ","Ä®":"Ä¯Ì","Ã":"iÌÌ","Ã":"iÌÌ","Ä¨":"iÌÌ"}}};function i(e,t){var n=r[t.toLowerCase()];return o(n?e.replace(n.regexp,(function(e){return n.map[e]})):e)}function o(e){return e.toLowerCase()}},4:function(e,t,n){"use strict";n.r(t),n.d(t,"localeUpperCase",(function(){return i})),n.d(t,"upperCase",(function(){return o}));var r={tr:{regexp:/[\u0069]/g,map:{i:"Ä°"}},az:{regexp:/[\u0069]/g,map:{i:"Ä°"}},lt:{regexp:/[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,map:{"iÌ":"I","jÌ":"J","Ä¯Ì":"Ä®","iÌÌ":"Ã","iÌÌ":"Ã","iÌÌ":"Ä¨"}}};function i(e,t){var n=r[t.toLowerCase()];return o(n?e.replace(n.regexp,(function(e){return n.map[e]})):e)}function o(e){return e.toUpperCase()}},5:function(e,t,n){"use strict";function r(e){return e.charAt(0).toUpperCase()+e.substr(1)}n.r(t),n.d(t,"upperCaseFirst",(function(){return r}))},6:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};t.__esModule=!0,t.track=t.analyticsFirstRun=t.setAnalyticsEnabled=t.analyticsEnabled=t.getUUID=void 0;var o=n(27),a=n(24),s=n(25);function u(e){return r(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,figma.clientStorage.setAsync("analytics.enabled",e)];case 1:return t.sent(),[2]}}))}))}function c(){return r(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,figma.clientStorage.setAsync("analytics.first.run",!1)];case 1:return e.sent(),[2]}}))}))}function l(e,t){if(e){var n=new XMLHttpRequest;n.open("GET",e),n.send()}}t.getUUID=function(){return r(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,figma.clientStorage.getAsync("google.analytics.uuid")];case 1:return(e=t.sent())||(e=o.v3(String(Date.now()),"cf564ee7-8aae-4ff2-91ef-3f62b1656b10")),[4,figma.clientStorage.setAsync("google.analytics.uuid",e)];case 2:return t.sent(),[2,e]}}))}))},t.analyticsEnabled=function(){return r(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,figma.clientStorage.getAsync("analytics.enabled")];case 1:return void 0!==(e=t.sent())?[3,3]:[4,u(!0)];case 2:t.sent(),e=!0,t.label=3;case 3:return[2,e]}}))}))},t.setAnalyticsEnabled=u,t.analyticsFirstRun=function(){return r(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,figma.clientStorage.getAsync("analytics.first.run")];case 1:return void 0===(e=t.sent())&&(e=!0),e?[4,c()]:[3,3];case 2:t.sent(),t.label=3;case 3:return[2,e]}}))}))},t.track=function(e,t,n){return r(this,void 0,void 0,(function(){var r,o;return i(this,(function(i){return!0,n&&!n.analyticsEnabled?(console.log("not enabled"),[2,"the user didn't enable sharing analytics"]):(r={v:1,tid:"UA-104184459-2",ds:"Figma",t:e,an:a.name,aid:"com.renameit.design",av:s.version},t&&Object.keys(t).forEach((function(e){r[e]=t[e]})),o="https://www.google-analytics.com/"+(n&&n.debug?"debug/":"")+"collect?"+(u=r,Object.keys(u).map((function(e){return encodeURIComponent(e)+"="+encodeURIComponent(u[e])})).join("&")+"&z=")+Date.now(),n&&n.debug&&(console.log("DEBUG: Analytics"),console.log(r),console.log("url: "+o)),[2,l(o)]);var u}))}))}},7:function(e,t,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var u=10;function c(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function f(e,t,n,r){var i,o,a,s;if(c(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=l(e))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return e}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=p.bind(r);return i.listener=n,r.wrapFn=i,i}function h(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):y(i,i.length)}function v(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function y(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");u=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return l(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)o(u,this,t);else{var c=u.length,l=y(u,c);for(n=0;n<c;++n)o(l[n],this,t)}return!0},s.prototype.addListener=function(e,t){return f(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return f(this,e,t,!0)},s.prototype.once=function(e,t){return c(t),this.on(e,d(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return c(t),this.prependListener(e,d(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,r,i,o,a;if(c(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},s.prototype.listeners=function(e){return h(this,e,!0)},s.prototype.rawListeners=function(e){return h(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):v.call(e,t)},s.prototype.listenerCount=v,s.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},8:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(14);Object.defineProperty(t,"FindReplace",{enumerable:!0,get:function(){return o(r).default}});var i=n(15);function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"Rename",{enumerable:!0,get:function(){return o(i).default}})},88:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};t.__esModule=!0;var a=n(1),s=n(8),u=n(9),c=n(12),l=n(11),f=n(6),p=c.parseData(figma.currentPage);!function(){i(this,void 0,void 0,(function(){var e,t,n,i,d,h,v,y;return o(this,(function(o){switch(o.label){case 0:return e="noSelection",[4,f.analyticsFirstRun()];case 1:return t=o.sent(),n={width:430,height:490,visible:!0},figma.command===c.WhereTo.RenameLayers&&c.hasSelection(p)?e=c.WhereTo.RenameLayers:figma.command===c.WhereTo.FindReplace&&c.hasSelection(p)?(e=c.WhereTo.FindReplace,n={width:430,height:320,visible:!0}):figma.command===c.WhereTo.Settings?(e=c.WhereTo.Settings,n={width:430,height:300,visible:!0}):figma.command===c.WhereTo.Donate?(e=c.WhereTo.Donate,n={width:0,height:0,visible:!1},figma.showUI(__html__,{visible:!1})):(e=c.WhereTo.NoSelection,n={width:430,height:150,visible:!0}),i=t?{width:430,height:180,visible:!0}:n,figma.showUI(__html__,i),h=(d=a.script).send,v=["sendData"],y={data:p,command:e},[4,f.getUUID()];case 2:return y.UUID=o.sent(),y.firstRun=t,[4,f.analyticsEnabled()];case 3:return h.apply(d,v.concat([(y.analyticsEnabled=o.sent(),y.windowDim=n,y)])),a.script.once("renameLayers",(function(e){var t=new s.Rename({allowChildLayer:!0});c.reorderSelection(figma.currentPage).forEach((function(n,i){var o=function(e,t,n,i){var o=l.renameData(t,p.selectionCount,i.nameInput,i.sequenceInput,p.pageName);return e.layer(r(r({},t),o))}(t,p.selection[i],0,e);u(o)||(n.name=o)})),figma.closePlugin()})),a.script.once("findReplaceLayers",(function(e){var t=new s.FindReplace;c.reorderSelection(figma.currentPage).forEach((function(n,r){var i=function(e,t,n){var r=l.findReplaceData(t,n.findText,n.replaceText,n.caseSensitive);return!!e.match(r)&&e.layer(r)}(t,p.selection[r],e);i&&(n.name=i)})),figma.closePlugin()})),a.script.once("cancel",(function(e){figma.closePlugin()})),a.script.once("setAnalytics",(function(e){f.setAnalyticsEnabled(e)})),a.script.once("resizeViewport",(function(e){figma.ui.resize(e.width,e.height)})),[2]}}))}))}()},9:function(e,t,n){var r=n(20),i=n(21);e.exports=function(e){return function(e){return"string"==typeof e}(e)&&e.length?i(e):r(e)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,