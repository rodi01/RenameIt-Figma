/*! For license information please see code.js.LICENSE.txt */
(()=>{var e={2237:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return n(e,[{key:"escapeRegExp",value:function(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}},{key:"layer",value:function(e){var t=e.caseSensitive?new RegExp(this.escapeRegExp(e.findText),"g"):new RegExp(this.escapeRegExp(e.findText),"gi");return e.layerName.replace(t,e.replaceWith)}},{key:"match",value:function(e){if(e.findText.length<=0)return!1;var t=String(e.findText),n=e.layerName;return e.caseSensitive||(t=t.toLowerCase(),n=n.toLowerCase()),n.includes(t)}}]),e}();t.default=r},3266:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(9660)),a=(r=n(9893))&&r.__esModule?r:{default:r},s=n(8890),c=n(9562),u=n(8366);function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var f="%ar%",p=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.allowTextCases,r=void 0===n||n,i=t.allowPageName,o=void 0===i||i,a=t.allowParent,s=void 0===a||a,c=t.allowSymbol,u=void 0===c||c,f=t.allowLayerStyle,p=void 0===f||f,h=t.allowChildLayer,d=void 0!==h&&h;l(this,e),this.allowTextCases=r,this.allowPageName=o,this.allowParent=s,this.allowSymbol=u,this.allowLayerStyle=p,this.allowChildLayer=d}return i(e,[{key:"shortcut",value:function(e){return new RegExp(e,"gi")}},{key:"paddy",value:function(e,t,n){var r=void 0!==n?n:"0",i=new Array(1+t).join(r);return(i+e).slice(-i.length)}},{key:"convertTitleCase",value:function(e){var t=(0,c.lowerCase)(e);return(0,a.default)(t)}},{key:"currentLayer",value:function(e,t){var n=e;return this.allowTextCases&&(n=(n=(n=(n=(n=(n=n.replace(this.shortcut("%\\*u%"),(0,s.upperCase)(t))).replace(this.shortcut("%\\*l%"),(0,c.lowerCase)(t))).replace(this.shortcut("%\\*t%"),this.convertTitleCase(t))).replace(this.shortcut("%\\*uf%"),(0,u.upperCaseFirst)(t))).replace(this.shortcut("%\\*c%"),o.camelCase(t))).replace(this.shortcut("%\\*pc%"),o.paramCase(t))),n=n.replace(/%\*/g,t),String(n)}},{key:"layer",value:function(e){var t=e.inputName,n=t.match(this.shortcut("%N")),r=t.match(/(?!%ar%)%A/gi),i=t.match(this.shortcut(f)),o=this;null!=n&&(t=t.replace(/%n+/gi,(function(t){var n=t.length-1,r="N"==t.charAt(1)?e.currIdx:e.selectionCount-e.currIdx-1;return(r+=e.startsFrom)>999&&(1===n||2===n||3===n)?n=4:r>99&&(1===n||2===n)?n=3:r>9&&1==n&&(n=2),o.paddy(r,n)})));var a="abcdefghijklmnopqrstuvwxyz".split(""),s=a.length;function c(t){var n=t.charAt(1),r="%ar%"===t?e.selectionCount-e.currIdx-1:e.currIdx,i=a[r%s];if(r>=s){var o=Math.floor(r/s);i=""+a[o-1]+i}return"A"===n?i.toUpperCase():i}return null!=i&&(t=t.replace(this.shortcut(f),c)),null!=r&&(t=t.replace(this.shortcut("%a"),c)),t=(t=(t=o.currentLayer(t,e.layerName)).replace(this.shortcut("%w"),e.width)).replace(this.shortcut("%h"),e.height),this.allowPageName&&(t=t.replace(this.shortcut("%p"),e.pageName)),this.allowParent&&(t=t.replace(this.shortcut("%o"),e.parentName)),this.allowSymbol&&(t=t.replace(this.shortcut("%s"),e.symbolName)),this.allowLayerStyle&&(t=t.replace(this.shortcut("%ls%"),e.layerStyle)),this.allowChildLayer&&(t=t.replace(this.shortcut("%ch%"),e.childLayer)),t}}]),e}();t.default=p},3131:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2237);Object.defineProperty(t,"FindReplace",{enumerable:!0,get:function(){return o(r).default}});var i=n(3266);function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"Rename",{enumerable:!0,get:function(){return o(i).default}})},9660:(e,t,n)=>{"use strict";n.r(t),n.d(t,{camelCase:()=>v,camelCaseTransform:()=>h,camelCaseTransformMerge:()=>d,capitalCase:()=>b,capitalCaseTransform:()=>m,constantCase:()=>C,dotCase:()=>O,headerCase:()=>j,noCase:()=>c,paramCase:()=>E,pascalCase:()=>p,pascalCaseTransform:()=>l,pascalCaseTransformMerge:()=>f,pathCase:()=>A,sentenceCase:()=>P,sentenceCaseTransform:()=>R,snakeCase:()=>N});var r=function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)};Object.create,Object.create;var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},i.apply(this,arguments)};Object.create,Object.create;var o=n(9562),a=[/([a-z0-9])([A-Z])/g,/([A-Z])([A-Z][a-z])/g],s=/[^A-Z0-9]+/gi;function c(e,t){void 0===t&&(t={});for(var n=t.splitRegexp,r=void 0===n?a:n,i=t.stripRegexp,c=void 0===i?s:i,l=t.transform,f=void 0===l?o.lowerCase:l,p=t.delimiter,h=void 0===p?" ":p,d=u(u(e,r,"$1\0$2"),c,"\0"),v=0,y=d.length;"\0"===d.charAt(v);)v++;for(;"\0"===d.charAt(y-1);)y--;return d.slice(v,y).split("\0").map(f).join(h)}function u(e,t,n){return t instanceof RegExp?e.replace(t,n):t.reduce((function(e,t){return e.replace(t,n)}),e)}function l(e,t){var n=e.charAt(0),r=e.substr(1).toLowerCase();return t>0&&n>="0"&&n<="9"?"_"+n+r:""+n.toUpperCase()+r}function f(e){return e.charAt(0).toUpperCase()+e.slice(1).toLowerCase()}function p(e,t){return void 0===t&&(t={}),c(e,i({delimiter:"",transform:l},t))}function h(e,t){return 0===t?e.toLowerCase():l(e,t)}function d(e,t){return 0===t?e.toLowerCase():f(e)}function v(e,t){return void 0===t&&(t={}),p(e,r({transform:h},t))}var y=function(){return y=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},y.apply(this,arguments)};Object.create,Object.create;var g=n(8366);function m(e){return(0,g.upperCaseFirst)(e.toLowerCase())}function b(e,t){return void 0===t&&(t={}),c(e,y({delimiter:" ",transform:m},t))}var w=function(){return w=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},w.apply(this,arguments)};Object.create,Object.create;var x=n(8890);function C(e,t){return void 0===t&&(t={}),c(e,w({delimiter:"_",transform:x.upperCase},t))}var S=function(){return S=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},S.apply(this,arguments)};function O(e,t){return void 0===t&&(t={}),c(e,S({delimiter:"."},t))}Object.create,Object.create;var L=function(){return L=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},L.apply(this,arguments)};function j(e,t){return void 0===t&&(t={}),b(e,L({delimiter:"-"},t))}Object.create,Object.create;var _=function(){return _=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},_.apply(this,arguments)};function E(e,t){return void 0===t&&(t={}),O(e,_({delimiter:"-"},t))}Object.create,Object.create;var T=function(){return T=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},T.apply(this,arguments)};function A(e,t){return void 0===t&&(t={}),O(e,T({delimiter:"/"},t))}Object.create,Object.create;var I=function(){return I=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},I.apply(this,arguments)};function R(e,t){var n=e.toLowerCase();return 0===t?(0,g.upperCaseFirst)(n):n}function P(e,t){return void 0===t&&(t={}),c(e,I({delimiter:" ",transform:R},t))}Object.create,Object.create;var k=function(){return k=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},k.apply(this,arguments)};function N(e,t){return void 0===t&&(t={}),O(e,k({delimiter:"_"},t))}Object.create,Object.create},7187:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),n([].slice.call(arguments))}v(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&v(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var a=10;function s(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function u(e,t,n,r){var i,o,a,u;if(s(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if("function"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=c(e))>0&&a.length>i&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,u=l,console&&console.warn&&console.warn(u)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=l.bind(r);return i.listener=n,r.wrapFn=i,i}function p(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):d(i,i.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function d(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function v(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)r(c,this,t);else{var u=c.length,l=d(c,u);for(n=0;n<u;++n)r(l[n],this,t)}return!0},o.prototype.addListener=function(e,t){return u(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return u(this,e,t,!0)},o.prototype.once=function(e,t){return s(t),this.on(e,f(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,f(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,r,i,o,a;if(s(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},o.prototype.listeners=function(e){return p(this,e,!0)},o.prototype.rawListeners=function(e){return p(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},o.prototype.listenerCount=h,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},8148:(e,t,n)=>{var r=n(8177),i=n(2979);e.exports=function(e){return function(e){return"string"==typeof e}(e)&&e.length?i(e):r(e)}},8177:e=>{var t=Object.prototype.hasOwnProperty,n=Object.prototype.toString;e.exports=function(e){if(null==e)return!0;if("boolean"==typeof e)return!1;if("number"==typeof e)return 0===e;if("string"==typeof e)return 0===e.length;if("function"==typeof e)return 0===e.length;if(Array.isArray(e))return 0===e.length;if(e instanceof Error)return""===e.message;if(e.toString==n)switch(e.toString()){case"[object File]":case"[object Map]":case"[object Set]":return 0===e.size;case"[object Object]":for(var r in e)if(t.call(e,r))return!1;return!0}return!1}},2979:e=>{"use strict";var t;e.exports=function(e){return"string"==typeof e&&(t||(t=new RegExp('^[\\s\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"]+$'))).test(e)}},9562:(e,t,n)=>{"use strict";n.r(t),n.d(t,{localeLowerCase:()=>i,lowerCase:()=>o});var r={tr:{regexp:/\u0130|\u0049|\u0049\u0307/g,map:{İ:"i",I:"ı",İ:"i"}},az:{regexp:/\u0130/g,map:{İ:"i",I:"ı",İ:"i"}},lt:{regexp:/\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,map:{I:"i̇",J:"j̇",Į:"į̇",Ì:"i̇̀",Í:"i̇́",Ĩ:"i̇̃"}}};function i(e,t){var n=r[t.toLowerCase()];return o(n?e.replace(n.regexp,(function(e){return n.map[e]})):e)}function o(e){return e.toLowerCase()}},2926:e=>{e.exports=["the","a","an","some"]},3079:e=>{e.exports=["as","because","for","and","nor","but","or","yet","so"]},1930:e=>{e.exports=["a","abaft","aboard","about","above","absent","across","afore","after","against","along","alongside","amid","amidst","among","amongst","an","apropos","apud","around","as","aside","astride","at","athwart","atop","barring","before","behind","below","beneath","beside","besides","between","beyond","but","by","circa","concerning","despite","down","during","except","excluding","failing","following","for","forenenst","from","given","in","including","inside","into","like","mid","midst","minus","modulo","near","next","notwithstanding","o'","of","off","on","onto","opposite","out","outside","over","pace","past","per","plus","pro","qua","regarding","round","sans","save","since","than","through","throughout","thru","thruout","till","times","to","toward","towards","under","underneath","unlike","until","unto","up","upon","versus","via","vice","vis-à-vis","with","within","without","worth"]},9893:(e,t,n)=>{var r=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;e.exports=function(e){return a(e,r)},e.exports.toTitleCase=e.exports;var i=n(2926).concat(n(1930)).concat(n(3079)).concat(r.source.replace(/(^\^\(|\)\$$)/g,"").split("|")).concat(["is"]),o=new RegExp("^("+i.join("|")+")$","i");function a(e,t){return e?e.replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,(function(e,n,r){return n>0&&n+e.length!==r.length&&e.search(t)>-1&&":"!==r.charAt(n-2)&&("-"!==r.charAt(n+e.length)||"-"===r.charAt(n-1))&&r.charAt(n-1).search(/[^\s-]/)<0?e.toLowerCase():e.substr(1).search(/[A-Z]|\../)>-1?e:e.charAt(0).toUpperCase()+e.substr(1)})):e}e.exports.toLaxTitleCase=function(e){return a(e,o)}},8286:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findReplaceData=t.renameData=void 0,t.renameData=function(e,t,n,r,i){return{layerName:e.layerName,currIdx:e.idx,width:e.width,height:e.height,selectionCount:t,inputName:n,startsFrom:Number(r),pageName:i,parentName:e.parentName,symbolName:e.symbolName,layerStyle:e.layerStyle,childLayer:e.childLayer,x:e.x,y:e.y,xIdx:e.xIdx,yIdx:e.yIdx}},t.findReplaceData=function(e,t,n,r){return{layerName:e.layerName,currIdx:e.idx,findText:t,replaceWith:n,caseSensitive:r}}},166:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.track=t.analyticsFirstRun=t.setAnalyticsEnabled=t.analyticsEnabled=t.getUUID=void 0;var o=n(1614),a=n(9218),s=n(4147),c="google.analytics.uuid",u="analytics.enabled",l="analytics.first.run";function f(e){return r(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,figma.clientStorage.setAsync(u,e)];case 1:return t.sent(),[2]}}))}))}function p(){return r(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,figma.clientStorage.setAsync(l,!1)];case 1:return e.sent(),[2]}}))}))}function h(e,t){if(e){var n=new XMLHttpRequest;n.open("GET",e),n.send()}}t.getUUID=function(){return r(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,figma.clientStorage.getAsync(c)];case 1:return(e=t.sent())||(e=(0,o.v3)(String(Date.now()),"cf564ee7-8aae-4ff2-91ef-3f62b1656b10")),[4,figma.clientStorage.setAsync(c,e)];case 2:return t.sent(),[2,e]}}))}))},t.analyticsEnabled=function(){return r(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,figma.clientStorage.getAsync(u)];case 1:return void 0!==(e=t.sent())?[3,3]:[4,f(!0)];case 2:t.sent(),e=!0,t.label=3;case 3:return[2,e]}}))}))},t.setAnalyticsEnabled=f,t.analyticsFirstRun=function(){return r(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,figma.clientStorage.getAsync(l)];case 1:return void 0===(e=t.sent())&&(e=!0),e?[4,p()]:[3,3];case 2:t.sent(),t.label=3;case 3:return[2,e]}}))}))},t.track=function(e,t,n){return r(this,void 0,void 0,(function(){var r,o;return i(this,(function(i){return n&&!n.analyticsEnabled?(console.log("not enabled"),[2,"the user didn't enable sharing analytics"]):(r={v:1,tid:"UA-104184459-2",ds:"Figma",t:e,an:a.name,aid:"com.renameit.design",av:s.version},t&&Object.keys(t).forEach((function(e){r[e]=t[e]})),o="https://www.google-analytics.com/".concat(n&&n.debug?"debug/":"","collect?").concat((c=r,Object.keys(c).map((function(e){return encodeURIComponent(e)+"="+encodeURIComponent(c[e])})).join("&")),"&z=").concat(Date.now()),n&&n.debug&&(console.log("DEBUG: Analytics"),console.log(r),console.log("url: ".concat(o))),[2,h(o)]);var c}))}))}},999:(e,t)=>{"use strict";function n(e){return void 0!==e.textStyleId?""!==e.textStyleId:void 0!==e.fillStyleId&&""!==e.fillStyleId}function r(e){return"InstanceNode"===e.constructor.name}function i(e){try{return void 0!==e.children&&e.children.length>0}catch(e){return!1}}function o(e,t){var n=function(e){var t=e.reduce((function(e,t){return e.x<t.x?e:t}),1),n=e.reduce((function(e,t){return e.y<t.y?e:t}),1);return{x:t.x,y:n.y}}(e),r=[],i="x"===t?"maxY":"maxX",o="x"===t?"y":"x";e.forEach((function(n){var a=!0;e.forEach((function(e){n!==e&&e[t]<n[t]&&n[o]<=e[i]&&e[o]<=n[i]&&(a=!1)})),a&&r.push(n)})),r.sort((function(e,t){return e[o]-t[o]}));var a=r.map((function(e){return[e]})),s=r.map((function(e){return e[i]-e[o]}));r.forEach((function(e,t){e.group=t})),e.filter((function(e){return!r.includes(e)})).forEach((function(e){r.forEach((function(t){t._tmpDistance=Math.abs((t[o]+t[i])/2-(e[o]+e[i])/2)}));var t=r.reduce((function(e,t){return e._tmpDistance<t._tmpDistance?e:t}));a[t.group].push(e),s[t.group]=Math.max(s[t.group],e[i]-e[o])})),a.forEach((function(e){e.sort((function(e,n){return e[t]-n[t]}))})),n[o];var c=0,u=[];return a.forEach((function(e,n){e.forEach((function(e){"x"===t?e.xIdx=c:e.yIdx=c,c++,u.push(e)})),s[n]})),u}Object.defineProperty(t,"__esModule",{value:!0}),t.getPositionalSequence=t.getChildLayer=t.hasChildLayer=t.getSymbolName=t.hasSymbols=t.getStyle=t.hasStyles=void 0,t.hasStyles=n,t.getStyle=function(e){var t="";if(n(e)){var r=figma.getStyleById(function(e){return"TextNode"===e.constructor.name?e.textStyleId:e.fillStyleId}(e));t=null!==r?r.name:""}return t},t.hasSymbols=r,t.getSymbolName=function(e){var t="";return r(e)&&(t=e.masterComponent.name),t},t.hasChildLayer=i,t.getChildLayer=function(e){var t="";if(i(e)){var n=e.children.length-1;t=String(e.children[n].name)}return t},t.getPositionalSequence=function(e){return o(e,"x"),o(e,"y")}},1026:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.sequenceTypeFirstRun=t.setSequenceType=t.getSequenceType=t.parseData=t.reorderSelection=t.hasSelection=t.WhereTo=void 0;var o,a=n(999),s="sequenceOrder";function c(e){return e.selection.length>0}function u(e){if(!c(e))return e.selection;var t=e.selection[0].parent;if(e.selection.every((function(e){return e.parent.id===t.id}))){var n=[];return t.children.forEach((function(t){e.selection.includes(t)&&n.push(t)})),n}return e.selection}function l(e){return r(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,figma.clientStorage.setAsync(s,e)];case 1:return t.sent(),[2]}}))}))}(o=t.WhereTo||(t.WhereTo={})).RenameLayers="renameLayers",o.FindReplace="findReplace",o.Settings="settings",o.NoSelection="noSelection",o.Donate="donate",t.hasSelection=c,t.reorderSelection=u,t.parseData=function(e){var t={pageName:e.name,selectionCount:e.selection.length,selection:[],hasLayerStyle:!1,hasSymbol:!1,hasChildLayer:!1};return u(e).forEach((function(e,n){t.hasLayerStyle||(t.hasLayerStyle=(0,a.hasStyles)(e)),t.hasSymbol||(t.hasSymbol=(0,a.hasSymbols)(e)),t.hasChildLayer||(t.hasChildLayer=(0,a.hasChildLayer)(e)),t.selection[n]=function(e,t){var n={id:e.id,layerName:e.name,idx:t,width:e.width,height:e.height,parentName:e.parent.name,layerStyle:(0,a.getStyle)(e),symbolName:(0,a.getSymbolName)(e),childLayer:(0,a.getChildLayer)(e),x:e.x,y:e.y,maxX:0,maxY:0};return n.maxX=n.x+n.width,n.maxY=n.y+n.height,n}(e,n)})),t.selection=(0,a.getPositionalSequence)(t.selection),t},t.getSequenceType=function(){return r(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,figma.clientStorage.getAsync(s)];case 1:return[2,e.sent()]}}))}))},t.setSequenceType=l,t.sequenceTypeFirstRun=function(){return r(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,figma.clientStorage.getAsync(s)];case 1:return void 0!==e.sent()?[3,3]:[4,l("layerList")];case 2:e.sent(),e.label=3;case 3:return[2]}}))}))}},480:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(1002),s=n(3131),c=n(8148),u=n(1026),l=n(8286),f=n(166),p=(0,u.parseData)(figma.currentPage);!function(){i(this,void 0,void 0,(function(){var e,t,n,i,h,d,v,y;return o(this,(function(o){switch(o.label){case 0:return e="noSelection",[4,(0,f.analyticsFirstRun)()];case 1:return t=o.sent(),n={width:460,height:510,visible:!0},[4,(0,u.sequenceTypeFirstRun)()];case 2:return o.sent(),figma.command===u.WhereTo.RenameLayers&&(0,u.hasSelection)(p)?e=u.WhereTo.RenameLayers:figma.command===u.WhereTo.FindReplace&&(0,u.hasSelection)(p)?(e=u.WhereTo.FindReplace,n={width:430,height:300,visible:!0}):figma.command===u.WhereTo.Settings?(e=u.WhereTo.Settings,n={width:430,height:300,visible:!0}):figma.command===u.WhereTo.Donate?(e=u.WhereTo.Donate,n={width:0,height:0,visible:!1},figma.showUI(__html__,{visible:!1})):(e=u.WhereTo.NoSelection,n={width:430,height:150,visible:!0}),i=t?{width:430,height:180,visible:!0}:n,figma.showUI(__html__,i),d=(h=a.script).send,v=["sendData"],y={data:p,command:e},[4,(0,f.getUUID)()];case 3:return y.UUID=o.sent(),y.firstRun=t,[4,(0,f.analyticsEnabled)()];case 4:return y.analyticsEnabled=o.sent(),y.windowDim=n,[4,(0,u.getSequenceType)()];case 5:return d.apply(h,v.concat([(y.sequenceType=o.sent(),y)])),a.script.once("renameLayers",(function(e){var t=new s.Rename({allowChildLayer:!0});p.selection.forEach((function(n,i){var o=function(e,t,n,i){var o=(0,l.renameData)(t,p.selectionCount,i.nameInput,i.sequenceInput,p.pageName);return"xPos"===i.sequenceType?o.currIdx=o.xIdx:"yPos"===i.sequenceType&&(o.currIdx=o.yIdx),e.layer(r(r({},t),o))}(t,p.selection[i],0,e);c(o)||(figma.getNodeById(n.id).name=o)})),(0,u.setSequenceType)(e.sequenceType),figma.closePlugin()})),a.script.once("findReplaceLayers",(function(e){var t=new s.FindReplace;p.selection.forEach((function(n,r){var i=function(e,t,n){var r=(0,l.findReplaceData)(t,n.findText,n.replaceText,n.caseSensitive);return!!e.match(r)&&e.layer(r)}(t,p.selection[r],e);i&&(figma.getNodeById(n.id).name=i)})),figma.closePlugin()})),a.script.once("cancel",(function(e){figma.closePlugin()})),a.script.once("setAnalytics",(function(e){(0,f.setAnalyticsEnabled)(e)})),a.script.once("resizeViewport",(function(e){figma.ui.resize(e.width,e.height)})),[2]}}))}))}()},8366:(e,t,n)=>{"use strict";function r(e){return e.charAt(0).toUpperCase()+e.substr(1)}n.r(t),n.d(t,{upperCaseFirst:()=>r})},8890:(e,t,n)=>{"use strict";n.r(t),n.d(t,{localeUpperCase:()=>i,upperCase:()=>o});var r={tr:{regexp:/[\u0069]/g,map:{i:"İ"}},az:{regexp:/[\u0069]/g,map:{i:"İ"}},lt:{regexp:/[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,map:{i̇:"I",j̇:"J",į̇:"Į",i̇̀:"Ì",i̇́:"Í",i̇̃:"Ĩ"}}};function i(e,t){var n=r[t.toLowerCase()];return o(n?e.replace(n.regexp,(function(e){return n.map[e]})):e)}function o(e){return e.toUpperCase()}},1614:(e,t,n)=>{"use strict";var r;n.r(t),n.d(t,{NIL:()=>A,parse:()=>y,stringify:()=>l,v1:()=>v,v3:()=>L,v4:()=>j,v5:()=>T,validate:()=>s,version:()=>I});var i=new Uint8Array(16);function o(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,s=function(e){return"string"==typeof e&&a.test(e)};for(var c=[],u=0;u<256;++u)c.push((u+256).toString(16).substr(1));const l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]).toLowerCase();if(!s(n))throw TypeError("Stringified UUID is invalid");return n};var f,p,h=0,d=0;const v=function(e,t,n){var r=t&&n||0,i=t||new Array(16),a=(e=e||{}).node||f,s=void 0!==e.clockseq?e.clockseq:p;if(null==a||null==s){var c=e.random||(e.rng||o)();null==a&&(a=f=[1|c[0],c[1],c[2],c[3],c[4],c[5]]),null==s&&(s=p=16383&(c[6]<<8|c[7]))}var u=void 0!==e.msecs?e.msecs:Date.now(),v=void 0!==e.nsecs?e.nsecs:d+1,y=u-h+(v-d)/1e4;if(y<0&&void 0===e.clockseq&&(s=s+1&16383),(y<0||u>h)&&void 0===e.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");h=u,d=v,p=s;var g=(1e4*(268435455&(u+=122192928e5))+v)%4294967296;i[r++]=g>>>24&255,i[r++]=g>>>16&255,i[r++]=g>>>8&255,i[r++]=255&g;var m=u/4294967296*1e4&268435455;i[r++]=m>>>8&255,i[r++]=255&m,i[r++]=m>>>24&15|16,i[r++]=m>>>16&255,i[r++]=s>>>8|128,i[r++]=255&s;for(var b=0;b<6;++b)i[r+b]=a[b];return t||l(i)},y=function(e){if(!s(e))throw TypeError("Invalid UUID");var t,n=new Uint8Array(16);return n[0]=(t=parseInt(e.slice(0,8),16))>>>24,n[1]=t>>>16&255,n[2]=t>>>8&255,n[3]=255&t,n[4]=(t=parseInt(e.slice(9,13),16))>>>8,n[5]=255&t,n[6]=(t=parseInt(e.slice(14,18),16))>>>8,n[7]=255&t,n[8]=(t=parseInt(e.slice(19,23),16))>>>8,n[9]=255&t,n[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,n[11]=t/4294967296&255,n[12]=t>>>24&255,n[13]=t>>>16&255,n[14]=t>>>8&255,n[15]=255&t,n};function g(e,t,n){function r(e,r,i,o){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=y(r)),16!==r.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var a=new Uint8Array(16+e.length);if(a.set(r),a.set(e,r.length),(a=n(a))[6]=15&a[6]|t,a[8]=63&a[8]|128,i){o=o||0;for(var s=0;s<16;++s)i[o+s]=a[s];return i}return l(a)}try{r.name=e}catch(e){}return r.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",r.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",r}function m(e){return 14+(e+64>>>9<<4)+1}function b(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function w(e,t,n,r,i,o){return b((a=b(b(t,e),b(r,o)))<<(s=i)|a>>>32-s,n);var a,s}function x(e,t,n,r,i,o,a){return w(t&n|~t&r,e,t,i,o,a)}function C(e,t,n,r,i,o,a){return w(t&r|n&~r,e,t,i,o,a)}function S(e,t,n,r,i,o,a){return w(t^n^r,e,t,i,o,a)}function O(e,t,n,r,i,o,a){return w(n^(t|~r),e,t,i,o,a)}const L=g("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){for(var t=[],n=32*e.length,r="0123456789abcdef",i=0;i<n;i+=8){var o=e[i>>5]>>>i%32&255,a=parseInt(r.charAt(o>>>4&15)+r.charAt(15&o),16);t.push(a)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[m(t)-1]=t;for(var n=1732584193,r=-271733879,i=-1732584194,o=271733878,a=0;a<e.length;a+=16){var s=n,c=r,u=i,l=o;n=x(n,r,i,o,e[a],7,-680876936),o=x(o,n,r,i,e[a+1],12,-389564586),i=x(i,o,n,r,e[a+2],17,606105819),r=x(r,i,o,n,e[a+3],22,-1044525330),n=x(n,r,i,o,e[a+4],7,-176418897),o=x(o,n,r,i,e[a+5],12,1200080426),i=x(i,o,n,r,e[a+6],17,-1473231341),r=x(r,i,o,n,e[a+7],22,-45705983),n=x(n,r,i,o,e[a+8],7,1770035416),o=x(o,n,r,i,e[a+9],12,-1958414417),i=x(i,o,n,r,e[a+10],17,-42063),r=x(r,i,o,n,e[a+11],22,-1990404162),n=x(n,r,i,o,e[a+12],7,1804603682),o=x(o,n,r,i,e[a+13],12,-40341101),i=x(i,o,n,r,e[a+14],17,-1502002290),n=C(n,r=x(r,i,o,n,e[a+15],22,1236535329),i,o,e[a+1],5,-165796510),o=C(o,n,r,i,e[a+6],9,-1069501632),i=C(i,o,n,r,e[a+11],14,643717713),r=C(r,i,o,n,e[a],20,-373897302),n=C(n,r,i,o,e[a+5],5,-701558691),o=C(o,n,r,i,e[a+10],9,38016083),i=C(i,o,n,r,e[a+15],14,-660478335),r=C(r,i,o,n,e[a+4],20,-405537848),n=C(n,r,i,o,e[a+9],5,568446438),o=C(o,n,r,i,e[a+14],9,-1019803690),i=C(i,o,n,r,e[a+3],14,-187363961),r=C(r,i,o,n,e[a+8],20,1163531501),n=C(n,r,i,o,e[a+13],5,-1444681467),o=C(o,n,r,i,e[a+2],9,-51403784),i=C(i,o,n,r,e[a+7],14,1735328473),n=S(n,r=C(r,i,o,n,e[a+12],20,-1926607734),i,o,e[a+5],4,-378558),o=S(o,n,r,i,e[a+8],11,-2022574463),i=S(i,o,n,r,e[a+11],16,1839030562),r=S(r,i,o,n,e[a+14],23,-35309556),n=S(n,r,i,o,e[a+1],4,-1530992060),o=S(o,n,r,i,e[a+4],11,1272893353),i=S(i,o,n,r,e[a+7],16,-155497632),r=S(r,i,o,n,e[a+10],23,-1094730640),n=S(n,r,i,o,e[a+13],4,681279174),o=S(o,n,r,i,e[a],11,-358537222),i=S(i,o,n,r,e[a+3],16,-722521979),r=S(r,i,o,n,e[a+6],23,76029189),n=S(n,r,i,o,e[a+9],4,-640364487),o=S(o,n,r,i,e[a+12],11,-421815835),i=S(i,o,n,r,e[a+15],16,530742520),n=O(n,r=S(r,i,o,n,e[a+2],23,-995338651),i,o,e[a],6,-198630844),o=O(o,n,r,i,e[a+7],10,1126891415),i=O(i,o,n,r,e[a+14],15,-1416354905),r=O(r,i,o,n,e[a+5],21,-57434055),n=O(n,r,i,o,e[a+12],6,1700485571),o=O(o,n,r,i,e[a+3],10,-1894986606),i=O(i,o,n,r,e[a+10],15,-1051523),r=O(r,i,o,n,e[a+1],21,-2054922799),n=O(n,r,i,o,e[a+8],6,1873313359),o=O(o,n,r,i,e[a+15],10,-30611744),i=O(i,o,n,r,e[a+6],15,-1560198380),r=O(r,i,o,n,e[a+13],21,1309151649),n=O(n,r,i,o,e[a+4],6,-145523070),o=O(o,n,r,i,e[a+11],10,-1120210379),i=O(i,o,n,r,e[a+2],15,718787259),r=O(r,i,o,n,e[a+9],21,-343485551),n=b(n,s),r=b(r,c),i=b(i,u),o=b(o,l)}return[n,r,i,o]}(function(e){if(0===e.length)return[];for(var t=8*e.length,n=new Uint32Array(m(t)),r=0;r<t;r+=8)n[r>>5]|=(255&e[r/8])<<r%32;return n}(e),8*e.length))})),j=function(e,t,n){var r=(e=e||{}).random||(e.rng||o)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=r[i];return t}return l(r)};function _(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:case 3:return t^n^r;case 2:return t&n^t&r^n&r}}function E(e,t){return e<<t|e>>>32-t}const T=g("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var r=unescape(encodeURIComponent(e));e=[];for(var i=0;i<r.length;++i)e.push(r.charCodeAt(i))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var o=e.length/4+2,a=Math.ceil(o/16),s=new Array(a),c=0;c<a;++c){for(var u=new Uint32Array(16),l=0;l<16;++l)u[l]=e[64*c+4*l]<<24|e[64*c+4*l+1]<<16|e[64*c+4*l+2]<<8|e[64*c+4*l+3];s[c]=u}s[a-1][14]=8*(e.length-1)/Math.pow(2,32),s[a-1][14]=Math.floor(s[a-1][14]),s[a-1][15]=8*(e.length-1)&4294967295;for(var f=0;f<a;++f){for(var p=new Uint32Array(80),h=0;h<16;++h)p[h]=s[f][h];for(var d=16;d<80;++d)p[d]=E(p[d-3]^p[d-8]^p[d-14]^p[d-16],1);for(var v=n[0],y=n[1],g=n[2],m=n[3],b=n[4],w=0;w<80;++w){var x=Math.floor(w/20),C=E(v,5)+_(x,y,g,m)+b+t[x]+p[w]>>>0;b=m,m=g,g=E(y,30)>>>0,y=v,v=C}n[0]=n[0]+v>>>0,n[1]=n[1]+y>>>0,n[2]=n[2]+g>>>0,n[3]=n[3]+m>>>0,n[4]=n[4]+b>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]})),A="00000000-0000-0000-0000-000000000000",I=function(e){if(!s(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}},1002:(e,t,n)=>{"use strict";n.r(t),n.d(t,{html:()=>a,script:()=>s});var r=n(7187);function i(e){const t=new r.EventEmitter,n=e=>{e&&e.event&&t.emit(e.event,e.data)};return e?window.onmessage=e=>n(e.data.pluginMessage):figma.ui.onmessage=e=>n(e),t.send=function(t,n){if("string"!=typeof t)throw new Error("Expected first argument to be an event name string");const r={event:t,data:n};e?window.parent.postMessage({pluginMessage:r},"*"):figma.ui.postMessage(r)},t.async=function(e){return new Promise((t=>{this.once(e,t)}))},t}const o="undefined"==typeof figma,a=o?i(!0):void 0,s=o?void 0:i()},9218:e=>{"use strict";e.exports=JSON.parse('{"name":"Rename It","id":"731271836271143349","api":"1.0.0","ui":"dist/ui.html","main":"dist/code.js","editorType":["figma"],"menu":[{"name":"Rename Selected Layers","command":"renameLayers"},{"name":"Find & Replace Selected Layers","command":"findReplace"},{"separator":true},{"name":"Settings","command":"settings"}]}')},4147:e=>{"use strict";e.exports=JSON.parse('{"name":"rename-it-figma","version":"2.0.0","description":"\\"Keep your Figma files organized, batch rename layers and frames.\\"","main":"code.js","scripts":{"dev":"webpack --watch --mode=development","build":"webpack --mode=development","prod":"webpack --mode production --devtool inline-source-map --config webpack.config.js","test":"echo \\"Error: no test specified\\" && exit 1"},"author":"Rodrigo Soares","license":"ISC","dependencies":{"@figma/plugin-typings":"^1.33.0","@rodi01/renameitlib":"^1.2.3","@types/react":"^17.0.6","@types/react-dom":"^17.0.5","css-loader":"^6.7.1","figma-plugin-ds":"^1.0.1","html-webpack-inline-source-plugin":"github:DustinJackson/html-webpack-inline-source-plugin#pull/82/head","html-webpack-plugin":"^5.5.0","node-sass":"^7.0.1","react":"^18.0.0","react-dom":"^18.0.0","react-figma-plugin-ds":"git+https://github.com/rodi01/react-figma-plugin-ds.git","sass-loader":"^12.6.0","style-loader":"^3.3.1","ts-loader":"^9.2.8","typescript":"^4.2.4","url-loader":"^4.1.1","uuid":"^8.3.2","webpack":"^5.71.0","webpack-cli":"^4.9.2"},"devDependencies":{"@typescript-eslint/eslint-plugin":"^5.17.0","@typescript-eslint/parser":"^5.17.0","eslint":"^8.12.0","eslint-config-airbnb":"^19.0.4","eslint-config-prettier":"^8.3.0","eslint-plugin-import":"^2.25.4","eslint-plugin-jsx-a11y":"^6.5.1","eslint-plugin-prettier":"^4.0.0","eslint-plugin-react":"^7.29.4","eslint-plugin-react-hooks":"^4.4.0","is-blank":"^2.1.0","is-number":"^7.0.0","prettier":"^2.3.0"}}')}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(480)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,